{"version":3,"sources":["util/ApolloProvider.tsx","gql.tsx","Routes.tsx","public/whatsapp.webp","pages/Login.tsx","components/loader.tsx","pages/Register.tsx","components/chat/messages.tsx","components/chat/container.tsx","components/list/container.tsx","components/list/header.tsx","components/chat/header.tsx","components/searcbar.tsx","components/list/newChat.tsx","components/profile.tsx","components/container.tsx","pages/Home.tsx","util/Auth.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["errorLink","onError","graphQLErrors","networkError","response","forEach","message","locations","path","includes","localStorage","removeItem","window","location","reload","uploadLink","createUploadLink","uri","token","getItem","httpLink","createHttpLink","fetchOptions","mode","headers","authorization","authLink","setContext","_","a","link","ApolloLink","from","client","ApolloClient","cache","InMemoryCache","defaultOptions","watchQuery","fetchPolicy","errorPolicy","query","mutate","ApolloProvider","props","authenticated","REGSITER","gql","START_CONVERSATION","USERS","LOGIN_MUTATION","LATEST_MESSAGE","SEND_MESSAGE","SET_COUNT","GET_FRIENDS","MESSAGES","FRIENDS_UPDATE","DETAILS","Login","useState","email","setEmail","history","useHistory","password","setPassword","useMutation","variables","login","error","data","useEffect","setItem","className","alt","src","whatsapp","width","height","placeholder","value","onChange","e","target","type","onClick","preventDefault","push","Loader","style","margin","Register","fullname","setFullname","username","setUsername","myError","setError","profilepic","setProfilepic","bio","setBio","userInput","register","loading","onRegister","length","then","to","border","background","color","cursor","htmlFor","id","accept","display","file","files","name","marginTop","Messages","convertToTime","createdAt","date","Date","hours","getHours","time","minutes","getMinutes","days","t","day","getDate","month","getMonth","year","getFullYear","currentDate","setDate","useMyContext","current","setcount","messagesEndRef","useRef","scrollIntoView","behavior","subscribeToMore","document","updateQuery","prev","subscriptionData","directMessages","directMessageSent","map","textAlign","sentBy","borderRadius","fontSize","parseInt","ref","Chat","setMessage","send","useQuery","setShow","EmojiEmotions","AttachFile","onSubmit","MicNoneSharp","List","friend","lastmessage","flex","count","lastmsgTime","Header","setNewChat","listOptions","setListOptions","setProfile","newChat","padding","Cached","MoreVert","online","Search","SearchBar","component","state","setState","friendSearch","setFriendSearch","userSearch","setUserSearch","ArrowBack","onFocus","onBlur","autoFocus","NewChat","users","start","setId","setDisplayChat","setCurrent","allUsers","startConversation","toLowerCase","Profile","pic","backgroundImage","userDetails","Container","refetch","usersQuery","displayChat","setPrev","profile","friends","conversationId","Context","createContext","Provider","children","messageSearch","setMessageSearch","show","useContext","Home","isMobile","decodedToken","jwtDecode","expiresAt","exp","Auth","Routes","exact","Component","App","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.5a15460b.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider as Provider,\n} from \"@apollo/client\";\nimport { createHttpLink, HttpLink } from \"apollo-link-http\";\nimport { ApolloLink, split } from \"apollo-link\";\nimport { createUploadLink } from \"apollo-upload-client\";\nimport { WebSocketLink } from \"apollo-link-ws\";\nimport { getMainDefinition } from \"apollo-utilities\";\nimport { setContext } from \"apollo-link-context\";\nimport { onError } from \"apollo-link-error\";\n\nconst errorLink = onError(({ graphQLErrors, networkError, response }) => {\n  if (graphQLErrors)\n    graphQLErrors.forEach(({ message, locations, path }) => {\n      if (message.includes(\"Not authenticated\")) {\n        localStorage.removeItem(\"token\");\n        window.location.reload();\n      } else if (message.includes(\"jwt\")) {\n        localStorage.removeItem(\"token\");\n        window.location.reload();\n      } else if (networkError) {\n        localStorage.removeItem(\"token\");\n        window.location.reload();\n      }\n    });\n});\n\nconst uploadLink = createUploadLink({\n  uri: \"/graphql\",\n});\n\nconst token = localStorage.getItem(\"token\");\n\nconst httpLink = createHttpLink({\n  uri: \"/graphql\",\n  fetchOptions: {\n    mode: \"no-cors\",\n  },\n  headers: {\n    authorization: token ? `Bearer ${token}` : \"\",\n  },\n});\n\nconst authLink = setContext(async (_, { headers }) => {\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\n//@ts-ignore\n// httpLink = errorLink.concat(authLink.concat(uploadLink).concat(httpLink));\n// const wsLink = new WebSocketLink({\n//   uri: `wss://whatsappweb-api.herokuapp.com/graphql`,\n//   options: {\n//     reconnect: true,\n//     connectionParams: {\n//       authorization: token ? `Bearer ${token}` : \"\",\n//     },\n//   },\n// });\n// const splitLink = split(({ query }) => {\n//   const definition = getMainDefinition(query);\n//   return (\n//     definition.kind === \"OperationDefinition\" &&\n//     definition.operation === \"subscription\"\n//   );\n// }, wsLink);\nconst link = ApolloLink.from([\n  authLink,\n  //@ts-ignore\n  uploadLink,\n  errorLink,\n  // splitLink,\n  httpLink,\n]);\n\nexport const client = new ApolloClient({\n  //@ts-ignore\n  link,\n  cache: new InMemoryCache(),\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: \"cache-and-network\",\n      errorPolicy: \"ignore\",\n    },\n    query: {\n      fetchPolicy: \"network-only\",\n      errorPolicy: \"all\",\n    },\n    mutate: {\n      errorPolicy: \"all\",\n    },\n  },\n});\n\nconst ApolloProvider: React.FC<{}> = (props: any) => {\n  return <Provider client={client} {...props} />;\n};\nexport default ApolloProvider;\n","import { gql } from \"@apollo/client\";\n\nexport const REGSITER = gql`\n  mutation createUser($userInput: UserInputData!) {\n    createUser(userInput: $userInput) {\n      fullname\n      message\n      username\n      bio\n    }\n  }\n`;\n\nexport const START_CONVERSATION = gql`\n  mutation startConversation($username: String!) {\n    startConversation(username: $username)\n  }\n`;\n\nexport const USERS = gql`\n  query allUsers {\n    allUsers {\n      fullname\n      username\n      profilepic\n      bio\n      online\n    }\n  }\n`;\n\nexport const LOGIN_MUTATION = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password)\n  }\n`;\n\nexport const LATEST_MESSAGE = gql`\n  subscription directMessageSent($id: ID!) {\n    directMessageSent(id: $id) {\n      time\n      sentBy\n      message\n    }\n  }\n`;\n\nexport const SEND_MESSAGE = gql`\n  mutation sendDirectMessage($id: ID!, $message: String!) {\n    sendDirectMessage(id: $id, message: $message) {\n      time\n      message\n      sentBy\n    }\n  }\n`;\n\nexport const SET_COUNT = gql`\n  mutation setcount($id: ID!) {\n    setCount(id: $id)\n  }\n`;\n\nexport const GET_FRIENDS = gql`\n  query friends {\n    friends {\n      username\n      lastmessage\n      profilepic\n      conversationId\n      count\n      lastmsgTime\n      online\n    }\n  }\n`;\n\nexport const MESSAGES = gql`\n  query directMessages($id: ID!) {\n    directMessages(id: $id) {\n      time\n      sentBy\n      message\n    }\n  }\n`;\n\nexport const FRIENDS_UPDATE = gql`\n  subscription directMessages {\n    directMessages {\n      time\n      sentBy\n      message\n    }\n  }\n`;\n\nexport const DETAILS = gql`\n  query userDetails {\n    userDetails {\n      bio\n      fullname\n      username\n      profilepic\n    }\n  }\n`;\n","import React from \"react\";\n\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Login from \"./pages/Login\";\nimport Register from \"./pages/Register\";\nimport Home from \"./pages/Home\";\nimport { Auth } from \"./util/Auth\";\n\nlet authenticated: boolean;\n\nAuth() ? (authenticated = true) : (authenticated = false);\n\nconst Authenticated = (Component: React.FC) => {\n  return authenticated ? <Component /> : <Login />;\n};\n\nconst Routes = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/register\">\n          <Register />\n        </Route>\n\n        <Route exact path=\"/\">\n          {Authenticated(Home)}\n        </Route>\n      </Switch>\n    </Router>\n  );\n};\n\nexport default Routes;\n","export default __webpack_public_path__ + \"static/media/whatsapp.5d95d9e7.webp\";","import React, { useEffect, useState } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { LOGIN_MUTATION } from \"../gql\";\nimport { useHistory } from \"react-router-dom\";\nimport whatsapp from \"../public/whatsapp.webp\";\nconst Login: React.FC = () => {\n  const [email, setEmail] = useState(\"\");\n  const history = useHistory();\n  const [password, setPassword] = useState(\"\");\n  const [login, { error, data }] = useMutation<{ login: string }>(\n    LOGIN_MUTATION,\n    {\n      variables: { email, password },\n    }\n  );\n\n  useEffect(() => {\n    localStorage.removeItem(\"token\");\n\n    if (data) {\n      localStorage.removeItem(\"token\");\n      localStorage.setItem(\"token\", data.login);\n      window.location.reload();\n    }\n  }, [data]);\n\n  useEffect(() => {\n    localStorage.removeItem(\"token\");\n  }, []);\n  return (\n    <div className=\"login\">\n      <img alt=\"whatsapp-icon\" src={whatsapp} width={100} height={100} />\n      <div className=\"error\">{error && error.message}</div>\n      <div className=\"input\">\n        <input\n          placeholder=\"Email\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n        />\n      </div>\n      <div className=\"input\">\n        <input\n          placeholder=\"Password\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          type=\"password\"\n        />\n      </div>\n      <div className=\"input\">\n        <button\n          onClick={(e) => {\n            e.preventDefault();\n            email && password && login();\n          }}\n        >\n          Login\n        </button>\n      </div>\n      <div\n        onClick={() => {\n          history.push(\"/register\");\n        }}\n        className=\"text\"\n      >\n        Dont have an account? Register\n      </div>\n    </div>\n  );\n};\n\nexport default Login;\n","import React from \"react\";\n\nconst Loader: React.FC = () => {\n  return (\n    <div className=\"outer\">\n      <div className=\"middle\">\n        <div style={{ margin: \"auto\" }} className=\"loader\"></div>\n      </div>\n    </div>\n  );\n};\n\nexport default Loader;\n","import React, { useState } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { Redirect, useHistory } from \"react-router-dom\";\nimport { REGSITER } from \"../gql\";\nimport whatsapp from \"../public/whatsapp.webp\";\nimport Loader from \"../components/loader\";\n\nconst Register = () => {\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [fullname, setFullname] = useState(\"\");\n  const [username, setUsername] = useState(\"\");\n  const [myError, setError] = useState(\"\");\n  const [profilepic, setProfilepic] = useState({});\n  const [bio, setBio] = useState(\"\");\n  const history = useHistory();\n  const [register, { error, loading }] = useMutation(REGSITER, {\n    variables: {\n      userInput: {\n        email,\n        fullname,\n        password,\n        username,\n        profilepic,\n        bio,\n      },\n    },\n  });\n  const onRegister = async (e: any) => {\n    e.preventDefault();\n    if (fullname.length < 6 || fullname.length > 25) {\n      return setError(\"Fullname too short or too long.\");\n    } else if (username.length < 4 || username.length > 16) {\n      return setError(\n        \"Username should be more than 3 characters and less than 16 characters.\"\n      );\n    } else if (password.length < 6) {\n      return setError(\"Password too short.\");\n    } else if (email.length < 1) {\n      return setError(\"No email entered.\");\n    } else {\n      setError(\"\");\n      register().then(({ data }) => {\n        if (data) {\n          history.push(\"/\");\n        }\n      });\n    }\n  };\n  if (localStorage.getItem(\"token\")) return <Redirect to=\"/\" />;\n  return (\n    <>\n      {loading && <Loader />}\n      <div className=\"mobile\">\n        <h1>Site can only be viewed on laptop or desktop</h1>\n      </div>\n      <div className=\"register\">\n        <img src={whatsapp} width={100} alt=\"whatsapp-icon\" height={100} />\n\n        <div className=\"error\">{myError || (error && error.message)}</div>\n        <form>\n          <div className=\"input\">\n            <input\n              style={{\n                border: myError.includes(\"Fullname\") ? \"1px solid red\" : \"\",\n              }}\n              placeholder=\"Fullname\"\n              onChange={(e) => setFullname(e.target.value)}\n              value={fullname}\n            />\n          </div>\n          <div\n            className=\"input file\"\n            style={{\n              background:\n                error && error.message.includes(\"image\") ? \"red\" : \"#67cf53\",\n            }}\n          >\n            <label\n              style={{\n                color: \"white\",\n                cursor: \"pointer\",\n              }}\n              htmlFor=\"input\"\n            >\n              <span>Upload image</span>\n            </label>\n            <input\n              type=\"file\"\n              id=\"input\"\n              accept=\"image/*\"\n              style={{\n                display: \"none\",\n              }}\n              onChange={({ target: { files } }) => {\n                //@ts-ignore\n                const file = files[0];\n                setProfilepic(file);\n              }}\n            />\n          </div>\n          <div className=\"input\">\n            <input\n              style={{\n                border:\n                  myError.includes(\"Username\") ||\n                  (error && error.message.includes(\"Username\"))\n                    ? \"1px solid red\"\n                    : \"\",\n              }}\n              placeholder=\"Username\"\n              onChange={(e) => setUsername(e.target.value)}\n              value={username}\n            />\n          </div>\n          <div className=\"input\">\n            <input\n              placeholder=\"Bio\"\n              onChange={(e) => setBio(e.target.value)}\n              value={bio}\n            />\n          </div>\n          <div className=\"input\">\n            <input\n              style={{\n                border:\n                  myError.includes(\"Email\") ||\n                  (error && error.message.includes(\"Email\")) ||\n                  myError.includes(\"Email\")\n                    ? \"1px solid red\"\n                    : \"\",\n              }}\n              type=\"email\"\n              placeholder=\"Email\"\n              onChange={(e) => setEmail(e.target.value)}\n              value={email}\n            />\n          </div>\n          <div className=\"input\">\n            <input\n              style={{\n                border: myError.includes(\"Password\") ? \"1px solid red\" : \"\",\n              }}\n              placeholder=\"Password\"\n              name=\"btn\"\n              type=\"password\"\n              onChange={(e) => setPassword(e.target.value)}\n              value={password}\n            />\n          </div>\n          <div>\n            <button style={{ marginTop: \"20px\" }} onClick={onRegister}>\n              Register\n            </button>\n          </div>\n          <div\n            onClick={() => {\n              history.push(\"/\");\n            }}\n            className=\"text\"\n          >\n            Already have an account? Login\n          </div>\n        </form>\n      </div>\n    </>\n  );\n};\n\nexport default Register;\n","import React, { useEffect, useRef } from \"react\";\nimport { useMutation } from \"@apollo/client\";\nimport { LATEST_MESSAGE, SET_COUNT } from \"../../gql\";\nimport { useMyContext } from \"../../pages/Home\";\n\ninterface Iprops {\n  data: any;\n}\nconst Messages: React.FC<Iprops> = (props) => {\n  const convertToTime = (createdAt: number) => {\n    const date = new Date(createdAt);\n    let hours: any = date.getHours();\n    let time = \"AM\";\n    let minutes: any = date.getMinutes();\n\n    if (minutes < 10) {\n      minutes = \"0\" + minutes;\n    }\n\n    if (hours > 12) {\n      hours = hours - 12;\n      time = \"PM\";\n    } else if (hours < 1) {\n      hours = \"12\";\n      time = \"AM\";\n    }\n\n    return hours + \":\" + minutes + \" \" + time;\n  };\n\n  function days(t: number) {\n    const date = new Date(t);\n    const day = date.getDate();\n    const month = date.getMonth() + 1;\n    const year = date.getFullYear();\n    let minutes: any = date.getMinutes();\n    if (minutes < 10) {\n      minutes = \"0\" + minutes;\n    }\n\n    let currentDate = new Date();\n    if (\n      `${day}/${month}/${year}` ===\n      `${currentDate.getDate()}/${\n        currentDate.getMonth() + 1\n      }/${currentDate.getFullYear()}`\n    ) {\n      return \"TODAY\";\n    }\n    currentDate.setDate(currentDate.getDate() - 1);\n\n    if (date > currentDate) return `YESTERDAY`;\n\n    return `${day}/${month + 1}/${year}`;\n  }\n\n  const { id, current } = useMyContext();\n  const [setcount] = useMutation(SET_COUNT, {\n    variables: {\n      id,\n    },\n  });\n\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const scrollToBottom = () => {\n    messagesEndRef.current?.scrollIntoView({ behavior: \"auto\" });\n  };\n\n  useEffect(scrollToBottom, [props.data.data]);\n  useEffect(() => {\n    props.data.subscribeToMore({\n      document: LATEST_MESSAGE,\n      variables: {\n        id,\n      },\n      //@ts-ignore\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData) {\n          return prev;\n        }\n        setcount();\n        return {\n          directMessages: [\n            ...prev.directMessages,\n            subscriptionData.data.directMessageSent,\n          ],\n        };\n      },\n    });\n    // eslint-disable-next-line\n  }, [id]);\n  useEffect(() => {\n    setcount();\n  }, [setcount]);\n  return (\n    <>\n      {props.data.error && <div></div>}\n      <div className=\"messages\">\n        {props.data.data &&\n          //@ts-ignore\n          props.data.data.directMessages.map((data, id) => {\n            return (\n              <div key={id}>\n                <div\n                  style={{\n                    textAlign:\n                      data.sentBy === current.username &&\n                      data.message !== \"official\"\n                        ? \"left\"\n                        : data.message === \"official\"\n                        ? \"center\"\n                        : \"right\",\n                  }}\n                  key={id}\n                >\n                  <div\n                    className=\"messageContainer\"\n                    style={{\n                      background:\n                        data.sentBy === current.username &&\n                        data.message !== \"official\"\n                          ? \"#ffffff\"\n                          : data.message === \"official\"\n                          ? \"#e1f3fb\"\n                          : \"#dbf4c6\",\n                      borderRadius: data.message === \"official\" ? \"10px\" : \"\",\n                      fontSize: data.message === \"official\" ? \"0.8em\" : \"\",\n                    }}\n                  >\n                    <div className=\"text\">\n                      {data.message !== \"official\" ? (\n                        <>\n                          <div className=\"message\">{data.message}</div>\n                          <div className=\"time\">\n                            {convertToTime(parseInt(data.time))}\n                          </div>\n                        </>\n                      ) : (\n                        <div style={{}}>{days(parseInt(data.time))}</div>\n                      )}\n                    </div>\n                  </div>\n                  <br />\n                </div>\n              </div>\n            );\n          })}\n        <div ref={messagesEndRef}></div>\n      </div>\n    </>\n  );\n};\n\nexport default Messages;\n","import React, { useEffect, useState } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport MessagesContainer from \"./messages\";\nimport { Messages } from \"../../types\";\nimport { MESSAGES, SEND_MESSAGE } from \"../../gql\";\nimport { AttachFile, EmojiEmotions, MicNoneSharp } from \"@material-ui/icons\";\nimport { useMyContext } from \"../../pages/Home\";\n\nconst Chat: React.FC = () => {\n  const { id } = useMyContext();\n  const [message, setMessage] = useState(\"\");\n  const [send] = useMutation(SEND_MESSAGE, {\n    variables: {\n      id,\n      message,\n    },\n  });\n  const data = useQuery<Messages>(MESSAGES, {\n    variables: { id },\n  });\n\n  useEffect(() => {\n    setMessage(\"\");\n  }, [id]);\n\n  const { setShow } = useMyContext();\n\n  return (\n    <div className=\"chat\">\n      <MessagesContainer data={data} />\n      <div className=\"sendmessage\">\n        <div style={{ width: \"5%\", textAlign: \"right\" }}>\n          <EmojiEmotions />\n        </div>\n        <div style={{ width: \"5%\", textAlign: \"center\" }}>\n          <AttachFile />\n        </div>\n        <form\n          style={{ width: \"83%\" }}\n          onSubmit={(e) => {\n            e.preventDefault();\n            setShow(false);\n            message && send();\n            setMessage(\"\");\n          }}\n        >\n          <input\n            placeholder=\"Write your message.\"\n            type=\"text\"\n            value={message}\n            onChange={(e) => {\n              e.preventDefault();\n              setMessage(e.target.value);\n            }}\n          />\n        </form>\n\n        <div style={{ width: \"7%\", textAlign: \"center\" }}>\n          <MicNoneSharp />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Chat;\n","import React from \"react\";\nimport { Friend } from \"../../types\";\n\ninterface Props {\n  friend: Friend;\n  prev: string;\n  current: string;\n}\n\nconst List: React.FC<Props> = ({ friend, current, prev }: Props) => {\n  return (\n    <div\n      className=\"list\"\n      style={{ background: current === friend.username ? \"#ebebeb\" : \"\" }}\n    >\n      <div className=\"profilepic\">\n        <img\n          src={friend.profilepic}\n          alt={friend.username}\n          className=\"profilepic\"\n        />\n      </div>\n\n      <div className=\"username\">\n        <div>{friend.username}</div>\n\n        <div className=\"lastmessage\">{friend.lastmessage}</div>\n      </div>\n\n      <div\n        style={{\n          flex: 1,\n        }}\n      >\n        <div\n          style={{\n            color:\n              friend.username === current ||\n              prev === friend.username ||\n              friend.count === 0\n                ? \"\"\n                : \"#6dd958\",\n          }}\n          className=\"lastmsgTime\"\n        >\n          {friend.lastmsgTime}\n        </div>\n        <>\n          <div className=\"messagecount\">\n            <div\n              className=\"container\"\n              style={{\n                background:\n                  friend.username === current ||\n                  prev === friend.username ||\n                  friend.count === 0\n                    ? \"\"\n                    : \"#6dd958\",\n              }}\n            >\n              {friend.username === current ||\n              prev === friend.username ||\n              friend.count === 0 ? (\n                \"\"\n              ) : (\n                <div>{friend.count}</div>\n              )}\n            </div>\n          </div>\n        </>\n      </div>\n    </div>\n  );\n};\n\nexport default List;\n","import React from \"react\";\nimport { Cached, Chat, MoreVert } from \"@material-ui/icons\";\nimport { useMyContext } from \"../../pages/Home\";\n\ninterface Props {\n  profilepic: any;\n}\n\nconst Header: React.FC<Props> = ({ profilepic }: Props) => {\n  const {\n    setNewChat,\n    listOptions,\n    setListOptions,\n    setProfile,\n    newChat,\n  } = useMyContext();\n  return (\n    <div className=\"header list\">\n      {profilepic && (\n        <div onClick={() => setProfile(true)} className=\"profilepic\">\n          <img src={profilepic} alt=\"profilepic\" />\n        </div>\n      )}\n      {listOptions && (\n        <div className=\"listoptions\">\n          <div className=\"items\">New group</div>\n          <div className=\"items\">Create room</div>\n          <div className=\"items\">Profile</div>\n          <div className=\"items\">Archived</div>\n          <div className=\"items\">Settings</div>\n          <div\n            style={{ cursor: \"pointer\" }}\n            onClick={() => {\n              localStorage.removeItem(\"token\");\n              window.location.reload();\n            }}\n          >\n            Logout\n          </div>\n        </div>\n      )}\n      <div className=\"icons\">\n        <div\n          style={{\n            padding: \"5px\",\n          }}\n        >\n          <Cached />\n        </div>\n        <div\n          onClick={() => setNewChat(true)}\n          className=\"icon\"\n          style={{\n            background: newChat ? \"#d5d5d5\" : \"\",\n            borderRadius: newChat ? \"50%\" : \"\",\n          }}\n        >\n          <Chat />\n        </div>\n        <div\n          className=\"icon\"\n          style={{\n            background: listOptions ? \"#d5d5d5\" : \"\",\n            borderRadius: listOptions ? \"50%\" : \"\",\n          }}\n          onClick={() => setListOptions(!listOptions)}\n        >\n          <MoreVert />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport { MoreVert, Search } from \"@material-ui/icons\";\nimport { useMyContext } from \"../../pages/Home\";\n\nconst Header: React.FC = () => {\n  const { current } = useMyContext();\n  return (\n    <div className=\"header chat\">\n      {current.profilepic && (\n        <div className=\"profilepic\">\n          {current.profilepic && (\n            <img src={current.profilepic} alt={current.username} />\n          )}\n        </div>\n      )}\n\n      <div className=\"text\">\n        <div style={{ fontSize: \"1em\" }}>{current.username}</div>\n        <div className=\"online\">\n          {current.online === \"Online\" ? \"Online\" : current.online}\n        </div>\n      </div>\n\n      <div className=\"icons\">\n        <div>\n          <Search />\n        </div>\n        <div>\n          <MoreVert />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { useState } from \"react\";\nimport { ArrowBack, Search } from \"@material-ui/icons\";\nimport { useMyContext } from \"../pages/Home\";\n\ninterface Props {\n  component: string;\n}\n\nconst SearchBar: React.FC<Props> = ({ component }: Props) => {\n  const [state, setState] = useState(false);\n  const {\n    friendSearch,\n    setFriendSearch,\n    userSearch,\n    setUserSearch,\n  } = useMyContext();\n\n  return (\n    <div\n      className=\"searchbarContainer\"\n      style={{ background: state ? \"white\" : \"\" }}\n    >\n      <div className=\"searchbar\">\n        <div className=\"searchicon\">\n          {state ? (\n            <div\n              style={{ cursor: \"pointer\" }}\n              onClick={() => component === \"users\" && setState(false)}\n            >\n              <ArrowBack style={{ width: 25, color: \"#5dbcd2\" }} />\n            </div>\n          ) : (\n            <Search style={{ width: 20 }} />\n          )}\n        </div>\n        <div style={{ width: \"85%\" }}>\n          <input\n            onFocus={() => setState(true)}\n            onBlur={() => component === \"friends\" && setState(false)}\n            autoFocus={component === \"users\" ? true : false}\n            placeholder={state ? \"\" : \"Search or start new chat\"}\n            className=\"searchinput\"\n            value={component === \"users\" ? userSearch : friendSearch}\n            onChange={(e) =>\n              component === \"users\"\n                ? setUserSearch(e.target.value)\n                : setFriendSearch(e.target.value)\n            }\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default SearchBar;\n","import React from \"react\";\nimport { ArrowBack } from \"@material-ui/icons\";\nimport { useMutation } from \"@apollo/client\";\nimport { useMyContext } from \"../../pages/Home\";\nimport { Users } from \"../../types\";\nimport SearchBar from \"../searcbar\";\nimport { START_CONVERSATION } from \"../../gql\";\n\ninterface Props {\n  users: Users;\n}\n\nconst NewChat: React.FC<Props> = ({ users }: Props) => {\n  const [start] = useMutation(START_CONVERSATION);\n  const {\n    setNewChat,\n    setId,\n    setDisplayChat,\n    setCurrent,\n    userSearch,\n  } = useMyContext();\n  return (\n    <div className=\"newchat\">\n      <div className=\"chatheader\">\n        <div className=\"back\">\n          <div style={{ cursor: \"pointer\" }} onClick={() => setNewChat(false)}>\n            <ArrowBack />\n          </div>\n          <div className=\"text\">New Chat</div>\n        </div>\n      </div>\n      <div className=\"searchContainer\">\n        <SearchBar component=\"users\" />\n      </div>\n\n      <div className=\"usersList\">\n        {users &&\n          users.allUsers.map(({ profilepic, username, bio, online }, id) => {\n            return (\n              <div\n                key={id}\n                onClick={() => {\n                  start({\n                    variables: { username },\n                  }).then(({ data }) => {\n                    setId(data.startConversation);\n                  });\n\n                  setCurrent({\n                    username,\n                    online,\n                    profilepic,\n                  });\n                  setDisplayChat(true);\n                  setNewChat(false);\n                }}\n                className=\"userContainer\"\n              >\n                {userSearch ? (\n                  <>\n                    {username\n                      .toLowerCase()\n                      .includes(userSearch.toLowerCase()) && (\n                      <div className=\"user\">\n                        <div className=\"profilepic\">\n                          <img src={profilepic} alt={username} />\n                        </div>\n                        <div className=\"text\">\n                          <div>{username}</div>\n                          <div className=\"bio\">{bio}</div>\n                        </div>\n                      </div>\n                    )}\n                  </>\n                ) : (\n                  <div className=\"user\">\n                    <div className=\"profilepic\">\n                      <img src={profilepic} alt={username} />\n                    </div>\n                    <div className=\"text\">\n                      <div>{username}</div>\n                      <div className=\"bio\">{bio}</div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n};\n\nexport default NewChat;\n","import React from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { ArrowBack } from \"@material-ui/icons\";\nimport { useMyContext } from \"../pages/Home\";\nimport { DETAILS } from \"../gql\";\nimport { userDetails } from \"../types\";\n\ntype Props = {\n  pic: string;\n};\n\nconst Profile: React.FC<Props> = ({ pic }: Props) => {\n  const { data } = useQuery<userDetails>(DETAILS);\n  const { setProfile } = useMyContext();\n  return (\n    <div style={{ background: \"#ededed\" }} className=\"newchat\">\n      <div className=\"chatheader\">\n        <div className=\"back\">\n          <div style={{ cursor: \"pointer\" }} onClick={() => setProfile(false)}>\n            <ArrowBack />\n          </div>\n          <div className=\"text\">Profile</div>\n        </div>\n      </div>\n\n      <div className=\"upload\">\n        <div\n          className=\"image\"\n          style={{\n            backgroundImage: `url(${pic})`,\n          }}\n        ></div>\n      </div>\n      <div className=\"details\">\n        <div className=\"headertext\">Your Name</div>\n        <div className=\"content\">\n          <div style={{ flex: 3 }}>{data?.userDetails.fullname}</div>\n        </div>\n      </div>\n      <div className=\"warning\">\n        <div>\n          This is not your username or pin. This name will be visible to your\n          WhatsApp contacts.\n        </div>\n      </div>\n      <div className=\"details\">\n        <div className=\"headertext\">About</div>\n        <div className=\"content\">\n          <div style={{ flex: 3 }}>\n            {data?.userDetails.bio || \"Hey there! I am using WhatsApp.\"}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Profile;\n","import React, { useEffect, useState } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport Chat from \"./chat/container\";\nimport List from \"./list/container\";\nimport { Friends, userDetails, Users } from \"../types\";\nimport { DETAILS, FRIENDS_UPDATE, GET_FRIENDS, USERS } from \"../gql\";\nimport ListHeader from \"./list/header\";\nimport ChatHeader from \"./chat/header\";\nimport SearchBar from \"./searcbar\";\nimport \"../styles/home.scss\";\nimport { useMyContext } from \"../pages/Home\";\nimport NewChat from \"./list/newChat\";\nimport Profile from \"./profile\";\nimport Loader from \"./loader\";\n\nconst Container: React.FC = () => {\n  const { subscribeToMore, refetch, data, loading } = useQuery<Friends>(\n    GET_FRIENDS\n  );\n  const [state, setState] = useState(true);\n  const usersQuery = useQuery<Users>(USERS);\n  const profilepic = useQuery<userDetails>(DETAILS).data?.userDetails\n    .profilepic;\n\n  const {\n    setId,\n    displayChat,\n    setDisplayChat,\n    current,\n    setCurrent,\n  } = useMyContext();\n  const [prev, setPrev] = useState(\"\");\n\n  useEffect(() => {\n    setState(false);\n  }, [data]);\n\n  useEffect(() => {\n    subscribeToMore({\n      document: FRIENDS_UPDATE,\n      //@ts-ignore\n      updateQuery: (prev, { subscriptionData }) => {\n        if (!subscriptionData) {\n          return prev;\n        }\n        setPrev(\"\");\n        refetch();\n      },\n    });\n  }, [data, subscribeToMore, refetch]);\n  const { friendSearch, newChat, profile } = useMyContext();\n  return (\n    <div className=\"container\">\n      {state && loading ? (\n        <Loader />\n      ) : newChat ? (\n        <div className=\"listcontainer\">\n          {/* @ts-ignore */}\n          <NewChat users={usersQuery.data} />\n        </div>\n      ) : (\n        <>\n          {profile ? (\n            <div style={{ background: \"#ededed\" }} className=\"listcontainer\">\n              <Profile pic={profilepic || \"\"} />\n            </div>\n          ) : (\n            <div className=\"listcontainer\">\n              <ListHeader profilepic={profilepic} />\n              <div className=\"searchContainer\">\n                <SearchBar component=\"friends\" />\n              </div>\n              <div className=\"friends\">\n                {data?.friends.map((friend, id) => {\n                  return (\n                    <div\n                      className=\"friend\"\n                      onClick={() => {\n                        setDisplayChat(true);\n                        setPrev(current.username);\n                        setCurrent({\n                          username: friend.username,\n                          online: friend.online,\n                          profilepic: friend.profilepic,\n                        });\n                        setId(friend.conversationId);\n                        refetch();\n                      }}\n                      key={id}\n                    >\n                      {friendSearch ? (\n                        <>\n                          {friend.username\n                            .toLowerCase()\n                            .includes(friendSearch.toLowerCase()) &&\n                            friend.lastmessage !== \"\" && (\n                              <List\n                                friend={friend}\n                                current={current.username}\n                                prev={prev}\n                              />\n                            )}\n                        </>\n                      ) : (\n                        friend.lastmessage !== \"\" && (\n                          <List\n                            friend={friend}\n                            current={current.username}\n                            prev={prev}\n                          />\n                        )\n                      )}\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n        </>\n      )}\n\n      {displayChat ? (\n        <div style={{ width: \"65vw\" }}>\n          <ChatHeader />\n          <Chat />\n        </div>\n      ) : (\n        <div className=\"none\"></div>\n      )}\n    </div>\n  );\n};\n\nexport default Container;\n","import React, { ReactNode, useContext, useState, createContext } from \"react\";\nimport Container from \"../components/container\";\nimport { isMobile } from \"react-device-detect\";\n\ntype ContextType = {\n  friendSearch: string;\n  setFriendSearch: (value: string) => void;\n  messageSearch: string;\n  setMessageSearch: (value: string) => void;\n  listOptions: boolean;\n  setListOptions: (value: boolean) => void;\n  newChat: boolean;\n  setNewChat: (value: boolean) => void;\n  userSearch: string;\n  setUserSearch: (value: string) => void;\n  id: number;\n  setId: (value: number) => void;\n  displayChat: boolean;\n  setDisplayChat: (value: boolean) => void;\n  current: currentType;\n  setCurrent: (value: currentType) => void;\n  prev: string;\n  setPrev: (value: string) => void;\n  profile: boolean;\n  setProfile: (value: boolean) => void;\n  show: boolean;\n  setShow: (value: boolean) => void;\n};\n\ntype currentType = {\n  username: string;\n  online: string;\n  profilepic: string;\n};\n//@ts-ignore\nconst Context = createContext<ContextType>();\n\ninterface Props {\n  children: ReactNode;\n}\n\nexport const Provider = ({ children }: Props) => {\n  const [friendSearch, setFriendSearch] = useState<string>(\"\");\n  const [messageSearch, setMessageSearch] = useState<string>(\"\");\n  const [listOptions, setListOptions] = useState<boolean>(false);\n  const [newChat, setNewChat] = useState<boolean>(false);\n  const [userSearch, setUserSearch] = useState<string>(\"\");\n  const [id, setId] = useState<number>(1);\n  const [displayChat, setDisplayChat] = useState<boolean>(false);\n  const [profile, setProfile] = useState<boolean>(false);\n  const [show, setShow] = useState<boolean>(false);\n  const [current, setCurrent] = useState<currentType>({\n    username: \"\",\n    profilepic: \"\",\n    online: \"\",\n  });\n  const [prev, setPrev] = useState<string>(\"\");\n\n  return (\n    <Context.Provider\n      value={{\n        friendSearch,\n        setFriendSearch,\n        messageSearch,\n        setMessageSearch,\n        listOptions,\n        setListOptions,\n        newChat,\n        setNewChat,\n        userSearch,\n        setUserSearch,\n        id,\n        setId,\n        displayChat,\n        setDisplayChat,\n        current,\n        setCurrent,\n        prev,\n        setPrev,\n        profile,\n        setProfile,\n        show,\n        setShow,\n      }}\n    >\n      {children}\n    </Context.Provider>\n  );\n};\n\nexport const useMyContext = () => useContext(Context);\n\nconst Home: React.FC = () => {\n  if (isMobile) {\n    return <div> This content is unavailable on mobile</div>;\n  }\n\n  return <Provider>{isMobile ? <div>Hey</div> : <Container />} </Provider>;\n};\n\nexport default Home;\n","import jwtDecode from \"jwt-decode\";\n\nexport function Auth() {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    const decodedToken: any = jwtDecode(token);\n    const expiresAt = new Date(decodedToken.exp * 1000);\n\n    if (new Date() > expiresAt) {\n      localStorage.removeItem(\"token\");\n      return false;\n    }\n\n    return true;\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport ApolloProvider from \"./util/ApolloProvider\";\nimport Routes from \"./Routes\";\n\nfunction App() {\n  return (\n    <ApolloProvider>\n      <Routes />\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}